#version 450

// Increase to make depth edges crisper. Decrease to reduce flicker.
#define EDGE_SHARPNESS		(1.0)

// Step in 2-pixel intervals since we already blurred against neighbors in the first AO pass.
// This constant can be increased while R decreases to improve performance at the expense of some
// dithering artifacts.
#define	SCALE				(2)

// Filter radius in pixels. This will be multiplied by SCALE
#define RADIUS				(4)

const float gaussian[RADIUS + 1] = 
//    float[](0.356642, 0.239400, 0.072410, 0.009869);
    float[](0.398943, 0.241971, 0.053991, 0.004432, 0.000134);  // stddev = 1.0
//    float[](0.153170, 0.144893, 0.122649, 0.092902, 0.062970);  // stddev = 2.0
//      float[](0.111220, 0.107798, 0.098151, 0.083953, 0.067458, 0.050920, 0.036108); // stddev = 3.0

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout (binding = 0, rgba8) uniform readonly image2D srcImage;
layout (binding = 1, rgba8) uniform writeonly image2D dstImage;

layout (push_constant) uniform PushConstants {
	ivec2 axis;
} constants;

float unpack_key(vec2 p) {
	return p.x * (256.0 / 257.0) + p.y * (1.0 / 257.0);
}

void main() {
	const ivec2 pos = ivec2(gl_GlobalInvocationID.xy);
	const ivec2 size = imageSize(srcImage);

	if (pos.x < size.x && pos.y < size.y) {
		vec4 temp = imageLoad(srcImage, pos);
		const vec2 preservedKey = temp.gb;
		const float key = unpack_key(preservedKey);

		float sum = temp.r;

		// Base weight for depth falloff, increase this for more blurriness, decrease it for
		// better edge discrimination
		float totalWeight = gaussian[0];
		sum *= totalWeight;

		for (int r = -RADIUS; r <= RADIUS; ++r) {
			// This loop should be unrolled and the statick branch optimized out, so the if
			// statement should have no runtime cost

			if (r != 0) {
				temp = imageLoad(srcImage, pos + constants.axis * (r * SCALE));
				const float tapKey = unpack_key(temp.gb);
				const float value = temp.r;

				// spatial domain: offset gaussian tap
				float weight = 0.3 + gaussian[abs(r)];

				// range domain: As depth difference increases, decrease weight
				weight *= max(0.01, 1.0 - (EDGE_SHARPNESS * 2000.0) * abs(tapKey - key));

				sum += value * weight;
				totalWeight += weight;
			}
		}

		const float epsilon = 0.0001;
		imageStore(dstImage, pos, vec4(sum / (totalWeight + epsilon), preservedKey, 1.0));
	}
}

